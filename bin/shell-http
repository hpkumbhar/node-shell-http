#!/usr/bin/env node
var pkg = require('../package.json');
var through = require('through');
var program = require('commander');
var http = require("http");
var url = require("url");
require('colors');

program
  .version(pkg.version)
  .usage('[options] url')
  .option('-c, --client', 'run in client mode (default)')
  .option('-s, --server', 'run in server mode')
  .option('-t, --token [abc123]', 'secret token')
  .option('-r, --restart', 'send a restart command (when in client mode)')
  .parse(process.argv);

if(program.token)
  process.env.SHELL_HTTP_TOKEN = program.token;

var sh = require('../');

if(!program.args[0]) {
  console.warn("  Missing URL");
  program.help();
}

var u = url.parse(program.args[0]);

var protocol = u.protocol;
if(!protocol) {
  console.warn("  Invalid URL - Missing protocol");
  program.help();
}

protocol = protocol.replace(/:$/,'');

var host = u.hostname;
if(!host)
  if(program.server)
    host = "0.0.0.0";
  else {
    console.warn("  Invalid URL - Missing hostname");
    program.help();
  }

var port = parseInt(u.port || process.env.PORT, 10) || 80;
if(!port) {
  console.warn("  Invalid port");
  program.help();
}

if(process.env.SHELL_HTTP_TOKEN)
  console.log("Using token %j".grey, process.env.SHELL_HTTP_TOKEN);

if(program.server) {

  if(protocol === 'https')
    console.warn("Sorry only 'http' command-line servers are supported.");

  //install shell listener
  var shserver = sh.install(
    //create server
    http.createServer(function(req, res) {
      res.writeHead(200, {
        'shell-http-version': pkg.version
      });
      res.end('a normal http server... or is it... https://github.com/jpillora/node-shell-http');
    }).listen(port, host, function() {
      console.log("Listening on http://%s:%s", host, port);
    })
  );

  var d = function() { return new Date().toISOString(); };

  shserver.on('connection', function(id, ip, port) {
    console.log("%s: Client '%s' connected (%s:%s)", d(), id, ip, port);
  });

  shserver.on('disconnection', function(id) {
    console.log("%s: Client '%s' disconnected", d(), id);
  });

} else {
  console.log("Connecting to %s://%s:%s...".grey, protocol,host,port);

  var client = sh.connect(protocol, port, host);

  client.on('connected', function() {
    var i = client.info;
    console.log("  Connected to '%s' (%s)", i.hostname.green, (protocol+'://'+host+':'+port).green);
    console.log("  Server Time '%s' (Uptime %ssec)", i.date.green, Math.round(i.uptime).toString().green);
    console.log("  Memory Usage %sGB/%sGB (%s% free)",
      (Math.round((i.totalmem-i.freemem)/10e5)/10e2).toString().cyan,
      (Math.round(i.totalmem/10e5)/10e2).toString().cyan,
      (Math.round((i.freemem/i.totalmem)*10e3)/10e1).toString().cyan
    );
    console.log("  Average CPU Loads %j (%s.0 max)", i.loadavg, i.cpus.length);
    dollar();
  });

  client.on('disconnected', function() {
    console.log("  Disconnected".red);
  });

  if(program.restart)
    client.restart();

  process.stdin.pipe(client.stdin);

  var split = function() {
    return through(function(buff) {
      dollar();
      buff.toString().split(/\n/).forEach(function(line) {
        if(line) this.emit('data', line+"\n");
      }.bind(this));
    });
  };

  var dollar = function() {
    clearTimeout(dollar.t);
    dollar.t = setTimeout(function() {
      process.stdout.write("$ ".grey);
    }, 100);
  };

  var colorize = function(prefix) {
    return through(function(buff) {
      this.emit('data', prefix + buff);
    });
  };

  client.stdout.pipe(split()).pipe(colorize("> ".cyan)).pipe(process.stdout);
  client.stderr.pipe(split()).pipe(colorize("> ".red)).pipe(process.stderr);
}




